# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_genicam', [dirname(__file__)])
        except ImportError:
            import _genicam
            return _genicam
        if fp is not None:
            try:
                _mod = imp.load_module('_genicam', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _genicam = swig_import_helper()
    del swig_import_helper
else:
    import _genicam
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _genicam.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _genicam.SwigPyIterator_value(self)
    def incr(self, n=1): return _genicam.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _genicam.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _genicam.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _genicam.SwigPyIterator_equal(self, *args)
    def copy(self): return _genicam.SwigPyIterator_copy(self)
    def next(self): return _genicam.SwigPyIterator_next(self)
    def __next__(self): return _genicam.SwigPyIterator___next__(self)
    def previous(self): return _genicam.SwigPyIterator_previous(self)
    def advance(self, *args): return _genicam.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _genicam.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _genicam.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _genicam.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _genicam.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _genicam.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _genicam.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _genicam.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _genicam.ios_base_erase_event
    imbue_event = _genicam.ios_base_imbue_event
    copyfmt_event = _genicam.ios_base_copyfmt_event
    def register_callback(self, *args): return _genicam.ios_base_register_callback(self, *args)
    def flags(self, *args): return _genicam.ios_base_flags(self, *args)
    def setf(self, *args): return _genicam.ios_base_setf(self, *args)
    def unsetf(self, *args): return _genicam.ios_base_unsetf(self, *args)
    def precision(self, *args): return _genicam.ios_base_precision(self, *args)
    def width(self, *args): return _genicam.ios_base_width(self, *args)
    __swig_getmethods__["sync_with_stdio"] = lambda x: _genicam.ios_base_sync_with_stdio
    if _newclass:sync_with_stdio = staticmethod(_genicam.ios_base_sync_with_stdio)
    def imbue(self, *args): return _genicam.ios_base_imbue(self, *args)
    def getloc(self): return _genicam.ios_base_getloc(self)
    __swig_getmethods__["xalloc"] = lambda x: _genicam.ios_base_xalloc
    if _newclass:xalloc = staticmethod(_genicam.ios_base_xalloc)
    def iword(self, *args): return _genicam.ios_base_iword(self, *args)
    def pword(self, *args): return _genicam.ios_base_pword(self, *args)
    __swig_destroy__ = _genicam.delete_ios_base
    __del__ = lambda self : None;
ios_base_swigregister = _genicam.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _genicam.cvar
ios_base.boolalpha = _genicam.cvar.ios_base_boolalpha
ios_base.dec = _genicam.cvar.ios_base_dec
ios_base.fixed = _genicam.cvar.ios_base_fixed
ios_base.hex = _genicam.cvar.ios_base_hex
ios_base.internal = _genicam.cvar.ios_base_internal
ios_base.left = _genicam.cvar.ios_base_left
ios_base.oct = _genicam.cvar.ios_base_oct
ios_base.right = _genicam.cvar.ios_base_right
ios_base.scientific = _genicam.cvar.ios_base_scientific
ios_base.showbase = _genicam.cvar.ios_base_showbase
ios_base.showpoint = _genicam.cvar.ios_base_showpoint
ios_base.showpos = _genicam.cvar.ios_base_showpos
ios_base.skipws = _genicam.cvar.ios_base_skipws
ios_base.unitbuf = _genicam.cvar.ios_base_unitbuf
ios_base.uppercase = _genicam.cvar.ios_base_uppercase
ios_base.adjustfield = _genicam.cvar.ios_base_adjustfield
ios_base.basefield = _genicam.cvar.ios_base_basefield
ios_base.floatfield = _genicam.cvar.ios_base_floatfield
ios_base.badbit = _genicam.cvar.ios_base_badbit
ios_base.eofbit = _genicam.cvar.ios_base_eofbit
ios_base.failbit = _genicam.cvar.ios_base_failbit
ios_base.goodbit = _genicam.cvar.ios_base_goodbit
ios_base.app = _genicam.cvar.ios_base_app
ios_base.ate = _genicam.cvar.ios_base_ate
ios_base.binary = _genicam.cvar.ios_base_binary
ios_base.ios_base_in = _genicam.cvar.ios_base_ios_base_in
ios_base.out = _genicam.cvar.ios_base_out
ios_base.trunc = _genicam.cvar.ios_base_trunc
ios_base.beg = _genicam.cvar.ios_base_beg
ios_base.cur = _genicam.cvar.ios_base_cur
ios_base.end = _genicam.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync=True):
  return _genicam.ios_base_sync_with_stdio(__sync)
ios_base_sync_with_stdio = _genicam.ios_base_sync_with_stdio

def ios_base_xalloc():
  return _genicam.ios_base_xalloc()
ios_base_xalloc = _genicam.ios_base_xalloc

class ios(ios_base):
    __swig_setmethods__ = {}
    for _s in [ios_base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr
    def rdstate(self): return _genicam.ios_rdstate(self)
    def clear(self, *args): return _genicam.ios_clear(self, *args)
    def setstate(self, *args): return _genicam.ios_setstate(self, *args)
    def good(self): return _genicam.ios_good(self)
    def eof(self): return _genicam.ios_eof(self)
    def fail(self): return _genicam.ios_fail(self)
    def bad(self): return _genicam.ios_bad(self)
    def exceptions(self, *args): return _genicam.ios_exceptions(self, *args)
    def __init__(self, *args): 
        this = _genicam.new_ios(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_ios
    __del__ = lambda self : None;
    def tie(self, *args): return _genicam.ios_tie(self, *args)
    def rdbuf(self, *args): return _genicam.ios_rdbuf(self, *args)
    def copyfmt(self, *args): return _genicam.ios_copyfmt(self, *args)
    def fill(self, *args): return _genicam.ios_fill(self, *args)
    def imbue(self, *args): return _genicam.ios_imbue(self, *args)
    def narrow(self, *args): return _genicam.ios_narrow(self, *args)
    def widen(self, *args): return _genicam.ios_widen(self, *args)
ios_swigregister = _genicam.ios_swigregister
ios_swigregister(ios)

Signed = _genicam.Signed
Unsigned = _genicam.Unsigned
_UndefinedSign = _genicam._UndefinedSign
NI = _genicam.NI
NA = _genicam.NA
WO = _genicam.WO
RO = _genicam.RO
RW = _genicam.RW
_UndefinedAccesMode = _genicam._UndefinedAccesMode
_CycleDetectAccesMode = _genicam._CycleDetectAccesMode
Beginner = _genicam.Beginner
Expert = _genicam.Expert
Guru = _genicam.Guru
Invisible = _genicam.Invisible
_UndefinedVisibility = _genicam._UndefinedVisibility
NoCache = _genicam.NoCache
WriteThrough = _genicam.WriteThrough
WriteAround = _genicam.WriteAround
_UndefinedCachingMode = _genicam._UndefinedCachingMode
Linear = _genicam.Linear
Logarithmic = _genicam.Logarithmic
Boolean = _genicam.Boolean
PureNumber = _genicam.PureNumber
HexNumber = _genicam.HexNumber
IPV4Address = _genicam.IPV4Address
MACAddress = _genicam.MACAddress
_UndefinedRepresentation = _genicam._UndefinedRepresentation
BigEndian = _genicam.BigEndian
LittleEndian = _genicam.LittleEndian
_UndefinedEndian = _genicam._UndefinedEndian
Custom = _genicam.Custom
Standard = _genicam.Standard
_UndefinedNameSpace = _genicam._UndefinedNameSpace
_None = _genicam._None
GEV = _genicam.GEV
IIDC = _genicam.IIDC
CL = _genicam.CL
USB = _genicam.USB
_UndefinedStandardNameSpace = _genicam._UndefinedStandardNameSpace
Yes = _genicam.Yes
No = _genicam.No
_UndefinedYesNo = _genicam._UndefinedYesNo
Increasing = _genicam.Increasing
Decreasing = _genicam.Decreasing
Varying = _genicam.Varying
Automatic = _genicam.Automatic
_UndefinedESlope = _genicam._UndefinedESlope
xvLoad = _genicam.xvLoad
xvCycles = _genicam.xvCycles
xvSFNC = _genicam.xvSFNC
xvDefault = _genicam.xvDefault
xvAll = _genicam.xvAll
_UndefinedEXMLValidation = _genicam._UndefinedEXMLValidation
fnAutomatic = _genicam.fnAutomatic
fnFixed = _genicam.fnFixed
fnScientific = _genicam.fnScientific
_UndefinedEDisplayNotation = _genicam._UndefinedEDisplayNotation
intfIValue = _genicam.intfIValue
intfIBase = _genicam.intfIBase
intfIInteger = _genicam.intfIInteger
intfIBoolean = _genicam.intfIBoolean
intfICommand = _genicam.intfICommand
intfIFloat = _genicam.intfIFloat
intfIString = _genicam.intfIString
intfIRegister = _genicam.intfIRegister
intfICategory = _genicam.intfICategory
intfIEnumeration = _genicam.intfIEnumeration
intfIEnumEntry = _genicam.intfIEnumEntry
intfIPort = _genicam.intfIPort
ctAllDependingNodes = _genicam.ctAllDependingNodes
ctAllTerminalNodes = _genicam.ctAllTerminalNodes
ctInvalidators = _genicam.ctInvalidators
ctReadingChildren = _genicam.ctReadingChildren
ctWritingChildren = _genicam.ctWritingChildren
ctDependingChildren = _genicam.ctDependingChildren
class Version(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Version, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Version, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Major"] = _genicam.Version_Major_set
    __swig_getmethods__["Major"] = _genicam.Version_Major_get
    if _newclass:Major = _swig_property(_genicam.Version_Major_get, _genicam.Version_Major_set)
    __swig_setmethods__["Minor"] = _genicam.Version_Minor_set
    __swig_getmethods__["Minor"] = _genicam.Version_Minor_get
    if _newclass:Minor = _swig_property(_genicam.Version_Minor_get, _genicam.Version_Minor_set)
    __swig_setmethods__["SubMinor"] = _genicam.Version_SubMinor_set
    __swig_getmethods__["SubMinor"] = _genicam.Version_SubMinor_get
    if _newclass:SubMinor = _swig_property(_genicam.Version_SubMinor_get, _genicam.Version_SubMinor_set)
    def __init__(self): 
        this = _genicam.new_Version()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_Version
    __del__ = lambda self : None;
Version_swigregister = _genicam.Version_swigregister
Version_swigregister(Version)

class IBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetAccessMode(self): return _genicam.IBase_GetAccessMode(self)
IBase_swigregister = _genicam.IBase_swigregister
IBase_swigregister(IBase)

class INode(IBase):
    __swig_setmethods__ = {}
    for _s in [IBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, INode, name, value)
    __swig_getmethods__ = {}
    for _s in [IBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, INode, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetName(self, FullQualified=False): return _genicam.INode_GetName(self, FullQualified)
    def GetNameSpace(self): return _genicam.INode_GetNameSpace(self)
    def GetVisibility(self): return _genicam.INode_GetVisibility(self)
    def InvalidateNode(self): return _genicam.INode_InvalidateNode(self)
    def IsCachable(self): return _genicam.INode_IsCachable(self)
    def IsAccessModeCacheable(self): return _genicam.INode_IsAccessModeCacheable(self)
    def GetCachingMode(self): return _genicam.INode_GetCachingMode(self)
    def GetPollingTime(self): return _genicam.INode_GetPollingTime(self)
    def GetToolTip(self): return _genicam.INode_GetToolTip(self)
    def GetDescription(self): return _genicam.INode_GetDescription(self)
    def GetDisplayName(self): return _genicam.INode_GetDisplayName(self)
    def GetDeviceName(self): return _genicam.INode_GetDeviceName(self)
    def GetChildren(self, *args): return _genicam.INode_GetChildren(self, *args)
    def GetParents(self): return _genicam.INode_GetParents(self)
    def RegisterCallback(self, *args): return _genicam.INode_RegisterCallback(self, *args)
    def DeregisterCallback(self, *args): return _genicam.INode_DeregisterCallback(self, *args)
    def GetNodeMap(self): return _genicam.INode_GetNodeMap(self)
    def GetEventID(self): return _genicam.INode_GetEventID(self)
    def IsStreamable(self): return _genicam.INode_IsStreamable(self)
    def GetPropertyNames(self): return _genicam.INode_GetPropertyNames(self)
    def GetProperty(self, *args): return _genicam.INode_GetProperty(self, *args)
    def ImposeAccessMode(self, *args): return _genicam.INode_ImposeAccessMode(self, *args)
    def ImposeVisibility(self, *args): return _genicam.INode_ImposeVisibility(self, *args)
    def GetAlias(self): return _genicam.INode_GetAlias(self)
    def GetCastAlias(self): return _genicam.INode_GetCastAlias(self)
    def GetDocuURL(self): return _genicam.INode_GetDocuURL(self)
    def IsDeprecated(self): return _genicam.INode_IsDeprecated(self)
    def GetPrincipalInterfaceType(self): return _genicam.INode_GetPrincipalInterfaceType(self)
    def IsFeature(self): return _genicam.INode_IsFeature(self)
INode_swigregister = _genicam.INode_swigregister
INode_swigregister(INode)


def IsReadable(*args):
  return _genicam.IsReadable(*args)
IsReadable = _genicam.IsReadable

def IsWritable(*args):
  return _genicam.IsWritable(*args)
IsWritable = _genicam.IsWritable

def IsImplemented(*args):
  return _genicam.IsImplemented(*args)
IsImplemented = _genicam.IsImplemented

def IsAvailable(*args):
  return _genicam.IsAvailable(*args)
IsAvailable = _genicam.IsAvailable

def Combine(*args):
  return _genicam.Combine(*args)
Combine = _genicam.Combine

def IsVisible(*args):
  return _genicam.IsVisible(*args)
IsVisible = _genicam.IsVisible

def CombineVisibility(*args):
  return _genicam.CombineVisibility(*args)
CombineVisibility = _genicam.CombineVisibility

def IsCacheable(*args):
  return _genicam.IsCacheable(*args)
IsCacheable = _genicam.IsCacheable

def CombineCachingMode(*args):
  return _genicam.CombineCachingMode(*args)
CombineCachingMode = _genicam.CombineCachingMode
class INodeMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, INodeMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, INodeMap, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetNodes(self): return _genicam.INodeMap_GetNodes(self)
    def GetNode(self, *args): return _genicam.INodeMap_GetNode(self, *args)
    def InvalidateNodes(self): return _genicam.INodeMap_InvalidateNodes(self)
    def Connect(self, *args): return _genicam.INodeMap_Connect(self, *args)
    def GetDeviceName(self): return _genicam.INodeMap_GetDeviceName(self)
    def Poll(self, *args): return _genicam.INodeMap_Poll(self, *args)
    def GetLock(self): return _genicam.INodeMap_GetLock(self)
    def GetNumNodes(self): return _genicam.INodeMap_GetNumNodes(self)
    __swig_destroy__ = _genicam.delete_INodeMap
    __del__ = lambda self : None;
INodeMap_swigregister = _genicam.INodeMap_swigregister
INodeMap_swigregister(INodeMap)

cbPostInsideLock = _genicam.cbPostInsideLock
cbPostOutsideLock = _genicam.cbPostOutsideLock
class PyNodeCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyNodeCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyNodeCallback, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_PyNodeCallback(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_PyNodeCallback
    __del__ = lambda self : None;
    def GetNode(self): return _genicam.PyNodeCallback_GetNode(self)
PyNodeCallback_swigregister = _genicam.PyNodeCallback_swigregister
PyNodeCallback_swigregister(PyNodeCallback)

def Register(node, callback_fun, callback_type):
    assert callback_type in ( cbPostOutsideLock, cbPostInsideLock)
    cb = PyNodeCallback(node, callback_fun, callback_type)
    cb.thisown = 0
    return node.RegisterCallback(cb)



def Deregister(*args):
  return _genicam.Deregister(*args)
Deregister = _genicam.Deregister
class IValue(IBase):
    __swig_setmethods__ = {}
    for _s in [IBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IValue, name, value)
    __swig_getmethods__ = {}
    for _s in [IBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IValue, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetNode(self): return _genicam.IValue_GetNode(self)
    def ToString(self, Verify=False, IgnoreCache=False): return _genicam.IValue_ToString(self, Verify, IgnoreCache)
    def FromString(self, *args): return _genicam.IValue_FromString(self, *args)
    def IsValueCacheValid(self): return _genicam.IValue_IsValueCacheValid(self)
IValue_swigregister = _genicam.IValue_swigregister
IValue_swigregister(IValue)

class node_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, node_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, node_vector, name)
    __repr__ = _swig_repr
    def iterator(self): return _genicam.node_vector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _genicam.node_vector___nonzero__(self)
    def __bool__(self): return _genicam.node_vector___bool__(self)
    def __len__(self): return _genicam.node_vector___len__(self)
    def pop(self): return _genicam.node_vector_pop(self)
    def __getslice__(self, *args): return _genicam.node_vector___getslice__(self, *args)
    def __setslice__(self, *args): return _genicam.node_vector___setslice__(self, *args)
    def __delslice__(self, *args): return _genicam.node_vector___delslice__(self, *args)
    def __delitem__(self, *args): return _genicam.node_vector___delitem__(self, *args)
    def __getitem__(self, *args): return _genicam.node_vector___getitem__(self, *args)
    def __setitem__(self, *args): return _genicam.node_vector___setitem__(self, *args)
    def append(self, *args): return _genicam.node_vector_append(self, *args)
    def empty(self): return _genicam.node_vector_empty(self)
    def size(self): return _genicam.node_vector_size(self)
    def clear(self): return _genicam.node_vector_clear(self)
    def swap(self, *args): return _genicam.node_vector_swap(self, *args)
    def get_allocator(self): return _genicam.node_vector_get_allocator(self)
    def begin(self): return _genicam.node_vector_begin(self)
    def end(self): return _genicam.node_vector_end(self)
    def rbegin(self): return _genicam.node_vector_rbegin(self)
    def rend(self): return _genicam.node_vector_rend(self)
    def pop_back(self): return _genicam.node_vector_pop_back(self)
    def erase(self, *args): return _genicam.node_vector_erase(self, *args)
    def __init__(self, *args): 
        this = _genicam.new_node_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _genicam.node_vector_push_back(self, *args)
    def front(self): return _genicam.node_vector_front(self)
    def back(self): return _genicam.node_vector_back(self)
    def assign(self, *args): return _genicam.node_vector_assign(self, *args)
    def resize(self, *args): return _genicam.node_vector_resize(self, *args)
    def insert(self, *args): return _genicam.node_vector_insert(self, *args)
    def reserve(self, *args): return _genicam.node_vector_reserve(self, *args)
    def capacity(self): return _genicam.node_vector_capacity(self)
    __swig_destroy__ = _genicam.delete_node_vector
    __del__ = lambda self : None;
node_vector_swigregister = _genicam.node_vector_swigregister
node_vector_swigregister(node_vector)

class value_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, value_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, value_vector, name)
    __repr__ = _swig_repr
    def iterator(self): return _genicam.value_vector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _genicam.value_vector___nonzero__(self)
    def __bool__(self): return _genicam.value_vector___bool__(self)
    def __len__(self): return _genicam.value_vector___len__(self)
    def pop(self): return _genicam.value_vector_pop(self)
    def __getslice__(self, *args): return _genicam.value_vector___getslice__(self, *args)
    def __setslice__(self, *args): return _genicam.value_vector___setslice__(self, *args)
    def __delslice__(self, *args): return _genicam.value_vector___delslice__(self, *args)
    def __delitem__(self, *args): return _genicam.value_vector___delitem__(self, *args)
    def __getitem__(self, *args): return _genicam.value_vector___getitem__(self, *args)
    def __setitem__(self, *args): return _genicam.value_vector___setitem__(self, *args)
    def append(self, *args): return _genicam.value_vector_append(self, *args)
    def empty(self): return _genicam.value_vector_empty(self)
    def size(self): return _genicam.value_vector_size(self)
    def clear(self): return _genicam.value_vector_clear(self)
    def swap(self, *args): return _genicam.value_vector_swap(self, *args)
    def get_allocator(self): return _genicam.value_vector_get_allocator(self)
    def begin(self): return _genicam.value_vector_begin(self)
    def end(self): return _genicam.value_vector_end(self)
    def rbegin(self): return _genicam.value_vector_rbegin(self)
    def rend(self): return _genicam.value_vector_rend(self)
    def pop_back(self): return _genicam.value_vector_pop_back(self)
    def erase(self, *args): return _genicam.value_vector_erase(self, *args)
    def __init__(self, *args): 
        this = _genicam.new_value_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _genicam.value_vector_push_back(self, *args)
    def front(self): return _genicam.value_vector_front(self)
    def back(self): return _genicam.value_vector_back(self)
    def assign(self, *args): return _genicam.value_vector_assign(self, *args)
    def resize(self, *args): return _genicam.value_vector_resize(self, *args)
    def insert(self, *args): return _genicam.value_vector_insert(self, *args)
    def reserve(self, *args): return _genicam.value_vector_reserve(self, *args)
    def capacity(self): return _genicam.value_vector_capacity(self)
    __swig_destroy__ = _genicam.delete_value_vector
    __del__ = lambda self : None;
value_vector_swigregister = _genicam.value_vector_swigregister
value_vector_swigregister(value_vector)

class string_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, string_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, string_vector, name)
    __repr__ = _swig_repr
    def iterator(self): return _genicam.string_vector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _genicam.string_vector___nonzero__(self)
    def __bool__(self): return _genicam.string_vector___bool__(self)
    def __len__(self): return _genicam.string_vector___len__(self)
    def pop(self): return _genicam.string_vector_pop(self)
    def __getslice__(self, *args): return _genicam.string_vector___getslice__(self, *args)
    def __setslice__(self, *args): return _genicam.string_vector___setslice__(self, *args)
    def __delslice__(self, *args): return _genicam.string_vector___delslice__(self, *args)
    def __delitem__(self, *args): return _genicam.string_vector___delitem__(self, *args)
    def __getitem__(self, *args): return _genicam.string_vector___getitem__(self, *args)
    def __setitem__(self, *args): return _genicam.string_vector___setitem__(self, *args)
    def append(self, *args): return _genicam.string_vector_append(self, *args)
    def empty(self): return _genicam.string_vector_empty(self)
    def size(self): return _genicam.string_vector_size(self)
    def clear(self): return _genicam.string_vector_clear(self)
    def swap(self, *args): return _genicam.string_vector_swap(self, *args)
    def get_allocator(self): return _genicam.string_vector_get_allocator(self)
    def begin(self): return _genicam.string_vector_begin(self)
    def end(self): return _genicam.string_vector_end(self)
    def rbegin(self): return _genicam.string_vector_rbegin(self)
    def rend(self): return _genicam.string_vector_rend(self)
    def pop_back(self): return _genicam.string_vector_pop_back(self)
    def erase(self, *args): return _genicam.string_vector_erase(self, *args)
    def __init__(self, *args): 
        this = _genicam.new_string_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _genicam.string_vector_push_back(self, *args)
    def front(self): return _genicam.string_vector_front(self)
    def back(self): return _genicam.string_vector_back(self)
    def assign(self, *args): return _genicam.string_vector_assign(self, *args)
    def resize(self, *args): return _genicam.string_vector_resize(self, *args)
    def insert(self, *args): return _genicam.string_vector_insert(self, *args)
    def reserve(self, *args): return _genicam.string_vector_reserve(self, *args)
    def capacity(self): return _genicam.string_vector_capacity(self)
    __swig_destroy__ = _genicam.delete_string_vector
    __del__ = lambda self : None;
string_vector_swigregister = _genicam.string_vector_swigregister
string_vector_swigregister(string_vector)

class IPort(IBase):
    __swig_setmethods__ = {}
    for _s in [IBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPort, name, value)
    __swig_getmethods__ = {}
    for _s in [IBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPort, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Read(self, *args): return _genicam.IPort_Read(self, *args)
    def Write(self, *args): return _genicam.IPort_Write(self, *args)
IPort_swigregister = _genicam.IPort_swigregister
IPort_swigregister(IPort)

CHUNK_BASE_ADDRESS_REGISTER_LEN = _genicam.CHUNK_BASE_ADDRESS_REGISTER_LEN
CHUNK_LENGTH_REGISTER_LEN = _genicam.CHUNK_LENGTH_REGISTER_LEN
class IChunkPort(IPort):
    __swig_setmethods__ = {}
    for _s in [IPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IChunkPort, name, value)
    __swig_getmethods__ = {}
    for _s in [IPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IChunkPort, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetChunkID(self): return _genicam.IChunkPort_GetChunkID(self)
    def CacheChunkData(self): return _genicam.IChunkPort_CacheChunkData(self)
    __swig_destroy__ = _genicam.delete_IChunkPort
    __del__ = lambda self : None;
IChunkPort_swigregister = _genicam.IChunkPort_swigregister
IChunkPort_swigregister(IChunkPort)

class IPortConstruct(IPort):
    __swig_setmethods__ = {}
    for _s in [IPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPortConstruct, name, value)
    __swig_getmethods__ = {}
    for _s in [IPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPortConstruct, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetSwapEndianess(self): return _genicam.IPortConstruct_GetSwapEndianess(self)
IPortConstruct_swigregister = _genicam.IPortConstruct_swigregister
IPortConstruct_swigregister(IPortConstruct)

class IPortWriteList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPortWriteList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPortWriteList, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Write(self, *args): return _genicam.IPortWriteList_Write(self, *args)
    def Replay(self, *args): return _genicam.IPortWriteList_Replay(self, *args)
    def SetCookie(self, *args): return _genicam.IPortWriteList_SetCookie(self, *args)
    def GetCookie(self): return _genicam.IPortWriteList_GetCookie(self)
IPortWriteList_swigregister = _genicam.IPortWriteList_swigregister
IPortWriteList_swigregister(IPortWriteList)

class IPortReplay(IPort):
    __swig_setmethods__ = {}
    for _s in [IPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPortReplay, name, value)
    __swig_getmethods__ = {}
    for _s in [IPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPortReplay, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Replay(self, *args): return _genicam.IPortReplay_Replay(self, *args)
IPortReplay_swigregister = _genicam.IPortReplay_swigregister
IPortReplay_swigregister(IPortReplay)

class IPortRecorder(IPortReplay):
    __swig_setmethods__ = {}
    for _s in [IPortReplay]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPortRecorder, name, value)
    __swig_getmethods__ = {}
    for _s in [IPortReplay]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPortRecorder, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def StartRecording(self, *args): return _genicam.IPortRecorder_StartRecording(self, *args)
    def StopRecording(self): return _genicam.IPortRecorder_StopRecording(self)
IPortRecorder_swigregister = _genicam.IPortRecorder_swigregister
IPortRecorder_swigregister(IPortRecorder)

class CPortImpl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPortImpl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPortImpl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == CPortImpl:
            _self = None
        else:
            _self = self
        this = _genicam.new_CPortImpl(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CPortImpl
    __del__ = lambda self : None;
    def GetAccessMode(self): return _genicam.CPortImpl_GetAccessMode(self)
    def Read(self, *args): return _genicam.CPortImpl_Read(self, *args)
    def Write(self, *args): return _genicam.CPortImpl_Write(self, *args)
    def __disown__(self):
        self.this.disown()
        _genicam.disown_CPortImpl(self)
        return weakref_proxy(self)
CPortImpl_swigregister = _genicam.CPortImpl_swigregister
CPortImpl_swigregister(CPortImpl)

class IDeviceInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDeviceInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IDeviceInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetModelName(self): return _genicam.IDeviceInfo_GetModelName(self)
    def GetVendorName(self): return _genicam.IDeviceInfo_GetVendorName(self)
    def GetToolTip(self): return _genicam.IDeviceInfo_GetToolTip(self)
    def GetStandardNameSpace(self): return _genicam.IDeviceInfo_GetStandardNameSpace(self)
    def GetGenApiVersion(self): return _genicam.IDeviceInfo_GetGenApiVersion(self)
    def GetSchemaVersion(self): return _genicam.IDeviceInfo_GetSchemaVersion(self)
    def GetDeviceVersion(self): return _genicam.IDeviceInfo_GetDeviceVersion(self)
    def GetProductGuid(self): return _genicam.IDeviceInfo_GetProductGuid(self)
    def GetVersionGuid(self): return _genicam.IDeviceInfo_GetVersionGuid(self)
    __swig_destroy__ = _genicam.delete_IDeviceInfo
    __del__ = lambda self : None;
IDeviceInfo_swigregister = _genicam.IDeviceInfo_swigregister
IDeviceInfo_swigregister(IDeviceInfo)

class CNodeMapRef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNodeMapRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CNodeMapRef, name)
    __repr__ = _swig_repr
    def __init__(self, DeviceName="Device"): 
        this = _genicam.new_CNodeMapRef(DeviceName)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CNodeMapRef
    __del__ = lambda self : None;
    def _LoadDLL(self, *args): return _genicam.CNodeMapRef__LoadDLL(self, *args)
    def _LoadXMLFromFile(self, *args): return _genicam.CNodeMapRef__LoadXMLFromFile(self, *args)
    def _LoadXMLFromString(self, *args): return _genicam.CNodeMapRef__LoadXMLFromString(self, *args)
    def _GetDeviceName(self): return _genicam.CNodeMapRef__GetDeviceName(self)
    def _Poll(self, *args): return _genicam.CNodeMapRef__Poll(self, *args)
    def _Destroy(self): return _genicam.CNodeMapRef__Destroy(self)
    __swig_getmethods__["_ClearXMLCache"] = lambda x: _genicam.CNodeMapRef__ClearXMLCache
    if _newclass:_ClearXMLCache = staticmethod(_genicam.CNodeMapRef__ClearXMLCache)
    def _GetNodes(self): return _genicam.CNodeMapRef__GetNodes(self)
    def _GetNode(self, *args): return _genicam.CNodeMapRef__GetNode(self, *args)
    def _InvalidateNodes(self): return _genicam.CNodeMapRef__InvalidateNodes(self)
    def _Connect(self, *args): return _genicam.CNodeMapRef__Connect(self, *args)
    __swig_setmethods__["_Ptr"] = _genicam.CNodeMapRef__Ptr_set
    __swig_getmethods__["_Ptr"] = _genicam.CNodeMapRef__Ptr_get
    if _newclass:_Ptr = _swig_property(_genicam.CNodeMapRef__Ptr_get, _genicam.CNodeMapRef__Ptr_set)
    def GetNode( self, nodeName ):
        """
        fetches a node with name nodeName and returns it casted to its original type
        """
        type_map = {intfIValue   :   CValuePtr,
                    intfIInteger :   CIntegerPtr,
                    intfIBoolean: CBooleanPtr,
                    intfICommand: CCommandPtr,
                    intfIFloat: CFloatPtr,
                    intfIString: CStringPtr,
                    intfIRegister: CRegisterPtr,
                    intfICategory: CCategoryPtr,
                    intfIEnumeration: CEnumerationPtr,
                    intfIEnumEntry: CEnumEntryPtr,
                    intfIPort: CPortPtr
                    }

        n = self._GetNode(nodeName)
        if n:
            n_intf = n.GetPrincipalInterfaceType()
            if n_intf in type_map:
                return type_map[n_intf](n)
            else:
                raise NotImplementedError("Interface %d not implemted for %s" % (n_intf, nodeName))
        else:
            raise AttributeError("Unknown Feature %s" % nodeName)

    def __getattr__(self, attribute):
        return self.GetNode(attribute)

    def __setattr__(self, attribute, val):
        if attribute in self.__dict__ or attribute in ( "thisown","this"):
            object.__setattr__(self, attribute, val)
        else:
            self.GetNode(attribute).SetValue(val)


CNodeMapRef_swigregister = _genicam.CNodeMapRef_swigregister
CNodeMapRef_swigregister(CNodeMapRef)

def CNodeMapRef__ClearXMLCache():
  return _genicam.CNodeMapRef__ClearXMLCache()
CNodeMapRef__ClearXMLCache = _genicam.CNodeMapRef__ClearXMLCache

class IFloat(IValue):
    __swig_setmethods__ = {}
    for _s in [IValue]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [IValue]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFloat, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetValue(self, *args): return _genicam.IFloat_SetValue(self, *args)
    def GetValue(self, Verify=False, IgnoreCache=False): return _genicam.IFloat_GetValue(self, Verify, IgnoreCache)
    def __call__(self): return _genicam.IFloat___call__(self)
    def GetMin(self): return _genicam.IFloat_GetMin(self)
    def GetMax(self): return _genicam.IFloat_GetMax(self)
    def HasInc(self): return _genicam.IFloat_HasInc(self)
    def GetInc(self): return _genicam.IFloat_GetInc(self)
    def GetRepresentation(self): return _genicam.IFloat_GetRepresentation(self)
    def GetUnit(self): return _genicam.IFloat_GetUnit(self)
    def GetDisplayNotation(self): return _genicam.IFloat_GetDisplayNotation(self)
    def GetDisplayPrecision(self): return _genicam.IFloat_GetDisplayPrecision(self)
    def ImposeMin(self, *args): return _genicam.IFloat_ImposeMin(self, *args)
    def ImposeMax(self, *args): return _genicam.IFloat_ImposeMax(self, *args)
IFloat_swigregister = _genicam.IFloat_swigregister
IFloat_swigregister(IFloat)

class IInteger(IValue):
    __swig_setmethods__ = {}
    for _s in [IValue]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IInteger, name, value)
    __swig_getmethods__ = {}
    for _s in [IValue]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IInteger, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetValue(self, *args): return _genicam.IInteger_SetValue(self, *args)
    def GetValue(self, Verify=False, IgnoreCache=False): return _genicam.IInteger_GetValue(self, Verify, IgnoreCache)
    def __call__(self): return _genicam.IInteger___call__(self)
    def GetMin(self): return _genicam.IInteger_GetMin(self)
    def GetMax(self): return _genicam.IInteger_GetMax(self)
    def GetInc(self): return _genicam.IInteger_GetInc(self)
    def GetRepresentation(self): return _genicam.IInteger_GetRepresentation(self)
    def GetUnit(self): return _genicam.IInteger_GetUnit(self)
    def ImposeMin(self, *args): return _genicam.IInteger_ImposeMin(self, *args)
    def ImposeMax(self, *args): return _genicam.IInteger_ImposeMax(self, *args)
IInteger_swigregister = _genicam.IInteger_swigregister
IInteger_swigregister(IInteger)

class IRegister(IValue):
    __swig_setmethods__ = {}
    for _s in [IValue]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IRegister, name, value)
    __swig_getmethods__ = {}
    for _s in [IValue]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IRegister, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Set(self, *args): return _genicam.IRegister_Set(self, *args)
    def Get(self, *args): return _genicam.IRegister_Get(self, *args)
    def GetLength(self): return _genicam.IRegister_GetLength(self)
    def GetAddress(self): return _genicam.IRegister_GetAddress(self)
    def GetAll(self):
              return self.Get(self.GetLength())

IRegister_swigregister = _genicam.IRegister_swigregister
IRegister_swigregister(IRegister)

class IEnumeration(IValue):
    __swig_setmethods__ = {}
    for _s in [IValue]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IEnumeration, name, value)
    __swig_getmethods__ = {}
    for _s in [IValue]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IEnumeration, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetSymbolics(self): return _genicam.IEnumeration_GetSymbolics(self)
    def GetEntries(self): return _genicam.IEnumeration_GetEntries(self)
    def SetIntValue(self, *args): return _genicam.IEnumeration_SetIntValue(self, *args)
    def GetIntValue(self, Verify=False, IgnoreCache=False): return _genicam.IEnumeration_GetIntValue(self, Verify, IgnoreCache)
    def GetEntryByName(self, *args): return _genicam.IEnumeration_GetEntryByName(self, *args)
    def GetEntry(self, *args): return _genicam.IEnumeration_GetEntry(self, *args)
    def GetCurrentEntry(self, Verify=False, IgnoreCache=False): return _genicam.IEnumeration_GetCurrentEntry(self, Verify, IgnoreCache)
    def __call__(self): return _genicam.IEnumeration___call__(self)
    def SetValue(self, *args): return _genicam.IEnumeration_SetValue(self, *args)
IEnumeration_swigregister = _genicam.IEnumeration_swigregister
IEnumeration_swigregister(IEnumeration)

class IEnumEntry(IValue):
    __swig_setmethods__ = {}
    for _s in [IValue]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IEnumEntry, name, value)
    __swig_getmethods__ = {}
    for _s in [IValue]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IEnumEntry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetValue(self): return _genicam.IEnumEntry_GetValue(self)
    def GetSymbolic(self): return _genicam.IEnumEntry_GetSymbolic(self)
    def GetNumericValue(self): return _genicam.IEnumEntry_GetNumericValue(self)
    def IsSelfClearing(self): return _genicam.IEnumEntry_IsSelfClearing(self)
    def __call__( self ):
        return self.GetValue()

IEnumEntry_swigregister = _genicam.IEnumEntry_swigregister
IEnumEntry_swigregister(IEnumEntry)

class IBoolean(IValue):
    __swig_setmethods__ = {}
    for _s in [IValue]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IBoolean, name, value)
    __swig_getmethods__ = {}
    for _s in [IValue]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IBoolean, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetValue(self, *args): return _genicam.IBoolean_SetValue(self, *args)
    def GetValue(self, Verify=False, IgnoreCache=False): return _genicam.IBoolean_GetValue(self, Verify, IgnoreCache)
    def __call__(self): return _genicam.IBoolean___call__(self)
IBoolean_swigregister = _genicam.IBoolean_swigregister
IBoolean_swigregister(IBoolean)

class ICommand(IValue):
    __swig_setmethods__ = {}
    for _s in [IValue]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICommand, name, value)
    __swig_getmethods__ = {}
    for _s in [IValue]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ICommand, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Execute(self, Verify=True): return _genicam.ICommand_Execute(self, Verify)
    def __call__(self): return _genicam.ICommand___call__(self)
    def IsDone(self, Verify=False): return _genicam.ICommand_IsDone(self, Verify)
ICommand_swigregister = _genicam.ICommand_swigregister
ICommand_swigregister(ICommand)

class IString(IValue):
    __swig_setmethods__ = {}
    for _s in [IValue]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IString, name, value)
    __swig_getmethods__ = {}
    for _s in [IValue]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IString, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetValue(self, *args): return _genicam.IString_SetValue(self, *args)
    def GetValue(self, Verify=False, IgnoreCache=False): return _genicam.IString_GetValue(self, Verify, IgnoreCache)
    def __call__(self): return _genicam.IString___call__(self)
    def GetMaxLength(self): return _genicam.IString_GetMaxLength(self)
IString_swigregister = _genicam.IString_swigregister
IString_swigregister(IString)

class ICategory(IValue):
    __swig_setmethods__ = {}
    for _s in [IValue]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICategory, name, value)
    __swig_getmethods__ = {}
    for _s in [IValue]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ICategory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetFeatures(self): return _genicam.ICategory_GetFeatures(self)
    __swig_destroy__ = _genicam.delete_ICategory
    __del__ = lambda self : None;
ICategory_swigregister = _genicam.ICategory_swigregister
ICategory_swigregister(ICategory)

class IReference(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IReference, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IReference, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetReference(self, *args): return _genicam.IReference_SetReference(self, *args)
IReference_swigregister = _genicam.IReference_swigregister
IReference_swigregister(IReference)

class IEnumReference(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IEnumReference, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IEnumReference, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetEnumReference(self, *args): return _genicam.IEnumReference_SetEnumReference(self, *args)
    def SetNumEnums(self, *args): return _genicam.IEnumReference_SetNumEnums(self, *args)
IEnumReference_swigregister = _genicam.IEnumReference_swigregister
IEnumReference_swigregister(IEnumReference)

class ISelector(IBase):
    __swig_setmethods__ = {}
    for _s in [IBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISelector, name, value)
    __swig_getmethods__ = {}
    for _s in [IBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ISelector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _genicam.delete_ISelector
    __del__ = lambda self : None;
ISelector_swigregister = _genicam.ISelector_swigregister
ISelector_swigregister(ISelector)

class ISelectorDigit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISelectorDigit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ISelectorDigit, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetFirst(self): return _genicam.ISelectorDigit_SetFirst(self)
    def SetNext(self, Tick=True): return _genicam.ISelectorDigit_SetNext(self, Tick)
    def Restore(self): return _genicam.ISelectorDigit_Restore(self)
    def ToString(self): return _genicam.ISelectorDigit_ToString(self)
    def GetSelectorList(self, Incremental=False): return _genicam.ISelectorDigit_GetSelectorList(self, Incremental)
    __swig_destroy__ = _genicam.delete_ISelectorDigit
    __del__ = lambda self : None;
ISelectorDigit_swigregister = _genicam.ISelectorDigit_swigregister
ISelectorDigit_swigregister(ISelectorDigit)

class CSelectorSet(ISelectorDigit):
    __swig_setmethods__ = {}
    for _s in [ISelectorDigit]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSelectorSet, name, value)
    __swig_getmethods__ = {}
    for _s in [ISelectorDigit]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSelectorSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_CSelectorSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CSelectorSet
    __del__ = lambda self : None;
    def IsEmpty(self): return _genicam.CSelectorSet_IsEmpty(self)
    def SetFirst(self): return _genicam.CSelectorSet_SetFirst(self)
    def SetNext(self, Tick=True): return _genicam.CSelectorSet_SetNext(self, Tick)
    def Restore(self): return _genicam.CSelectorSet_Restore(self)
    def ToString(self): return _genicam.CSelectorSet_ToString(self)
    def GetSelectorList(self, Incremental=False): return _genicam.CSelectorSet_GetSelectorList(self, Incremental)
CSelectorSet_swigregister = _genicam.CSelectorSet_swigregister
CSelectorSet_swigregister(CSelectorSet)

class CChunkPort(IPortConstruct):
    __swig_setmethods__ = {}
    for _s in [IPortConstruct]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CChunkPort, name, value)
    __swig_getmethods__ = {}
    for _s in [IPortConstruct]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CChunkPort, name)
    __repr__ = _swig_repr
    def __init__(self, pPort=None): 
        this = _genicam.new_CChunkPort(pPort)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CChunkPort
    __del__ = lambda self : None;
    def GetAccessMode(self): return _genicam.CChunkPort_GetAccessMode(self)
    def GetPrincipalInterfaceType(self): return _genicam.CChunkPort_GetPrincipalInterfaceType(self)
    def Read(self, *args): return _genicam.CChunkPort_Read(self, *args)
    def Write(self, *args): return _genicam.CChunkPort_Write(self, *args)
    def SetPortImpl(self, *args): return _genicam.CChunkPort_SetPortImpl(self, *args)
    def GetSwapEndianess(self): return _genicam.CChunkPort_GetSwapEndianess(self)
    def InvalidateNode(self): return _genicam.CChunkPort_InvalidateNode(self)
    def AttachPort(self, *args): return _genicam.CChunkPort_AttachPort(self, *args)
    def DetachPort(self): return _genicam.CChunkPort_DetachPort(self)
    def AttachChunk(self, *args): return _genicam.CChunkPort_AttachChunk(self, *args)
    def DetachChunk(self): return _genicam.CChunkPort_DetachChunk(self)
    def GetChunkIDLength(self): return _genicam.CChunkPort_GetChunkIDLength(self)
    def CheckChunkID(self, *args): return _genicam.CChunkPort_CheckChunkID(self, *args)
    def UpdateBuffer(self, *args): return _genicam.CChunkPort_UpdateBuffer(self, *args)
    def ClearCache(self): return _genicam.CChunkPort_ClearCache(self)
CChunkPort_swigregister = _genicam.CChunkPort_swigregister
CChunkPort_swigregister(CChunkPort)

class AttachStatistics_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttachStatistics_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttachStatistics_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["NumChunkPorts"] = _genicam.AttachStatistics_t_NumChunkPorts_set
    __swig_getmethods__["NumChunkPorts"] = _genicam.AttachStatistics_t_NumChunkPorts_get
    if _newclass:NumChunkPorts = _swig_property(_genicam.AttachStatistics_t_NumChunkPorts_get, _genicam.AttachStatistics_t_NumChunkPorts_set)
    __swig_setmethods__["NumChunks"] = _genicam.AttachStatistics_t_NumChunks_set
    __swig_getmethods__["NumChunks"] = _genicam.AttachStatistics_t_NumChunks_get
    if _newclass:NumChunks = _swig_property(_genicam.AttachStatistics_t_NumChunks_get, _genicam.AttachStatistics_t_NumChunks_set)
    __swig_setmethods__["NumAttachedChunks"] = _genicam.AttachStatistics_t_NumAttachedChunks_set
    __swig_getmethods__["NumAttachedChunks"] = _genicam.AttachStatistics_t_NumAttachedChunks_get
    if _newclass:NumAttachedChunks = _swig_property(_genicam.AttachStatistics_t_NumAttachedChunks_get, _genicam.AttachStatistics_t_NumAttachedChunks_set)
    def __init__(self): 
        this = _genicam.new_AttachStatistics_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_AttachStatistics_t
    __del__ = lambda self : None;
AttachStatistics_t_swigregister = _genicam.AttachStatistics_t_swigregister
AttachStatistics_t_swigregister(AttachStatistics_t)

class CChunkAdapter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CChunkAdapter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CChunkAdapter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _genicam.delete_CChunkAdapter
    __del__ = lambda self : None;
    def AttachNodeMap(self, *args): return _genicam.CChunkAdapter_AttachNodeMap(self, *args)
    def DetachNodeMap(self): return _genicam.CChunkAdapter_DetachNodeMap(self)
    def CheckBufferLayout(self, *args): return _genicam.CChunkAdapter_CheckBufferLayout(self, *args)
    def AttachBuffer(self, *args): return _genicam.CChunkAdapter_AttachBuffer(self, *args)
    def DetachBuffer(self): return _genicam.CChunkAdapter_DetachBuffer(self)
    def UpdateBuffer(self, *args): return _genicam.CChunkAdapter_UpdateBuffer(self, *args)
    def ClearCaches(self): return _genicam.CChunkAdapter_ClearCaches(self)
CChunkAdapter_swigregister = _genicam.CChunkAdapter_swigregister
CChunkAdapter_swigregister(CChunkAdapter)

class CChunkAdapterGEV(CChunkAdapter):
    __swig_setmethods__ = {}
    for _s in [CChunkAdapter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CChunkAdapterGEV, name, value)
    __swig_getmethods__ = {}
    for _s in [CChunkAdapter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CChunkAdapterGEV, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_CChunkAdapterGEV(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CChunkAdapterGEV
    __del__ = lambda self : None;
    def CheckBufferLayout(self, *args): return _genicam.CChunkAdapterGEV_CheckBufferLayout(self, *args)
    def AttachBuffer(self, *args): return _genicam.CChunkAdapterGEV_AttachBuffer(self, *args)
CChunkAdapterGEV_swigregister = _genicam.CChunkAdapterGEV_swigregister
CChunkAdapterGEV_swigregister(CChunkAdapterGEV)

class SingleChunkData_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SingleChunkData_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SingleChunkData_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ChunkID"] = _genicam.SingleChunkData_t_ChunkID_set
    __swig_getmethods__["ChunkID"] = _genicam.SingleChunkData_t_ChunkID_get
    if _newclass:ChunkID = _swig_property(_genicam.SingleChunkData_t_ChunkID_get, _genicam.SingleChunkData_t_ChunkID_set)
    __swig_setmethods__["ChunkOffset"] = _genicam.SingleChunkData_t_ChunkOffset_set
    __swig_getmethods__["ChunkOffset"] = _genicam.SingleChunkData_t_ChunkOffset_get
    if _newclass:ChunkOffset = _swig_property(_genicam.SingleChunkData_t_ChunkOffset_get, _genicam.SingleChunkData_t_ChunkOffset_set)
    __swig_setmethods__["ChunkLength"] = _genicam.SingleChunkData_t_ChunkLength_set
    __swig_getmethods__["ChunkLength"] = _genicam.SingleChunkData_t_ChunkLength_get
    if _newclass:ChunkLength = _swig_property(_genicam.SingleChunkData_t_ChunkLength_get, _genicam.SingleChunkData_t_ChunkLength_set)
    def __init__(self): 
        this = _genicam.new_SingleChunkData_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_SingleChunkData_t
    __del__ = lambda self : None;
SingleChunkData_t_swigregister = _genicam.SingleChunkData_t_swigregister
SingleChunkData_t_swigregister(SingleChunkData_t)

class SingleChunkDataStr_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SingleChunkDataStr_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SingleChunkDataStr_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ChunkID"] = _genicam.SingleChunkDataStr_t_ChunkID_set
    __swig_getmethods__["ChunkID"] = _genicam.SingleChunkDataStr_t_ChunkID_get
    if _newclass:ChunkID = _swig_property(_genicam.SingleChunkDataStr_t_ChunkID_get, _genicam.SingleChunkDataStr_t_ChunkID_set)
    __swig_setmethods__["ChunkOffset"] = _genicam.SingleChunkDataStr_t_ChunkOffset_set
    __swig_getmethods__["ChunkOffset"] = _genicam.SingleChunkDataStr_t_ChunkOffset_get
    if _newclass:ChunkOffset = _swig_property(_genicam.SingleChunkDataStr_t_ChunkOffset_get, _genicam.SingleChunkDataStr_t_ChunkOffset_set)
    __swig_setmethods__["ChunkLength"] = _genicam.SingleChunkDataStr_t_ChunkLength_set
    __swig_getmethods__["ChunkLength"] = _genicam.SingleChunkDataStr_t_ChunkLength_get
    if _newclass:ChunkLength = _swig_property(_genicam.SingleChunkDataStr_t_ChunkLength_get, _genicam.SingleChunkDataStr_t_ChunkLength_set)
    def __init__(self): 
        this = _genicam.new_SingleChunkDataStr_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_SingleChunkDataStr_t
    __del__ = lambda self : None;
SingleChunkDataStr_t_swigregister = _genicam.SingleChunkDataStr_t_swigregister
SingleChunkDataStr_t_swigregister(SingleChunkDataStr_t)

class CChunkAdapterGeneric(CChunkAdapter):
    __swig_setmethods__ = {}
    for _s in [CChunkAdapter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CChunkAdapterGeneric, name, value)
    __swig_getmethods__ = {}
    for _s in [CChunkAdapter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CChunkAdapterGeneric, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_CChunkAdapterGeneric(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CChunkAdapterGeneric
    __del__ = lambda self : None;
    def CheckBufferLayout(self, *args): return _genicam.CChunkAdapterGeneric_CheckBufferLayout(self, *args)
    def AttachBuffer(self, *args): return _genicam.CChunkAdapterGeneric_AttachBuffer(self, *args)
CChunkAdapterGeneric_swigregister = _genicam.CChunkAdapterGeneric_swigregister
CChunkAdapterGeneric_swigregister(CChunkAdapterGeneric)

class CEventPort(IPortConstruct):
    __swig_setmethods__ = {}
    for _s in [IPortConstruct]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEventPort, name, value)
    __swig_getmethods__ = {}
    for _s in [IPortConstruct]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CEventPort, name)
    __repr__ = _swig_repr
    def __init__(self, pNode=None): 
        this = _genicam.new_CEventPort(pNode)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CEventPort
    __del__ = lambda self : None;
    def GetAccessMode(self): return _genicam.CEventPort_GetAccessMode(self)
    def GetPrincipalInterfaceType(self): return _genicam.CEventPort_GetPrincipalInterfaceType(self)
    def Read(self, *args): return _genicam.CEventPort_Read(self, *args)
    def Write(self, *args): return _genicam.CEventPort_Write(self, *args)
    def SetPortImpl(self, *args): return _genicam.CEventPort_SetPortImpl(self, *args)
    def GetSwapEndianess(self): return _genicam.CEventPort_GetSwapEndianess(self)
    def InvalidateNode(self): return _genicam.CEventPort_InvalidateNode(self)
    def AttachNode(self, *args): return _genicam.CEventPort_AttachNode(self, *args)
    def DetachNode(self): return _genicam.CEventPort_DetachNode(self)
    def GetEventIDLength(self): return _genicam.CEventPort_GetEventIDLength(self)
    def CheckEventID(self, *args): return _genicam.CEventPort_CheckEventID(self, *args)
    def AttachEvent(self, *args): return _genicam.CEventPort_AttachEvent(self, *args)
    def DetachEvent(self): return _genicam.CEventPort_DetachEvent(self)
CEventPort_swigregister = _genicam.CEventPort_swigregister
CEventPort_swigregister(CEventPort)

class CEventAdapter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEventAdapter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CEventAdapter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _genicam.delete_CEventAdapter
    __del__ = lambda self : None;
    def AttachNodeMap(self, *args): return _genicam.CEventAdapter_AttachNodeMap(self, *args)
    def DetachNodeMap(self): return _genicam.CEventAdapter_DetachNodeMap(self)
    def DeliverMessage(self, *args): return _genicam.CEventAdapter_DeliverMessage(self, *args)
CEventAdapter_swigregister = _genicam.CEventAdapter_swigregister
CEventAdapter_swigregister(CEventAdapter)

class GVCP_REQUEST_HEADER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GVCP_REQUEST_HEADER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GVCP_REQUEST_HEADER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Magic"] = _genicam.GVCP_REQUEST_HEADER_Magic_set
    __swig_getmethods__["Magic"] = _genicam.GVCP_REQUEST_HEADER_Magic_get
    if _newclass:Magic = _swig_property(_genicam.GVCP_REQUEST_HEADER_Magic_get, _genicam.GVCP_REQUEST_HEADER_Magic_set)
    __swig_setmethods__["Flags"] = _genicam.GVCP_REQUEST_HEADER_Flags_set
    __swig_getmethods__["Flags"] = _genicam.GVCP_REQUEST_HEADER_Flags_get
    if _newclass:Flags = _swig_property(_genicam.GVCP_REQUEST_HEADER_Flags_get, _genicam.GVCP_REQUEST_HEADER_Flags_set)
    __swig_setmethods__["Command"] = _genicam.GVCP_REQUEST_HEADER_Command_set
    __swig_getmethods__["Command"] = _genicam.GVCP_REQUEST_HEADER_Command_get
    if _newclass:Command = _swig_property(_genicam.GVCP_REQUEST_HEADER_Command_get, _genicam.GVCP_REQUEST_HEADER_Command_set)
    __swig_setmethods__["Length"] = _genicam.GVCP_REQUEST_HEADER_Length_set
    __swig_getmethods__["Length"] = _genicam.GVCP_REQUEST_HEADER_Length_get
    if _newclass:Length = _swig_property(_genicam.GVCP_REQUEST_HEADER_Length_get, _genicam.GVCP_REQUEST_HEADER_Length_set)
    __swig_setmethods__["ReqId"] = _genicam.GVCP_REQUEST_HEADER_ReqId_set
    __swig_getmethods__["ReqId"] = _genicam.GVCP_REQUEST_HEADER_ReqId_get
    if _newclass:ReqId = _swig_property(_genicam.GVCP_REQUEST_HEADER_ReqId_get, _genicam.GVCP_REQUEST_HEADER_ReqId_set)
    def __init__(self): 
        this = _genicam.new_GVCP_REQUEST_HEADER()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_GVCP_REQUEST_HEADER
    __del__ = lambda self : None;
GVCP_REQUEST_HEADER_swigregister = _genicam.GVCP_REQUEST_HEADER_swigregister
GVCP_REQUEST_HEADER_swigregister(GVCP_REQUEST_HEADER)

class GVCP_EVENT_ITEM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GVCP_EVENT_ITEM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GVCP_EVENT_ITEM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Reserved"] = _genicam.GVCP_EVENT_ITEM_Reserved_set
    __swig_getmethods__["Reserved"] = _genicam.GVCP_EVENT_ITEM_Reserved_get
    if _newclass:Reserved = _swig_property(_genicam.GVCP_EVENT_ITEM_Reserved_get, _genicam.GVCP_EVENT_ITEM_Reserved_set)
    __swig_setmethods__["EventId"] = _genicam.GVCP_EVENT_ITEM_EventId_set
    __swig_getmethods__["EventId"] = _genicam.GVCP_EVENT_ITEM_EventId_get
    if _newclass:EventId = _swig_property(_genicam.GVCP_EVENT_ITEM_EventId_get, _genicam.GVCP_EVENT_ITEM_EventId_set)
    __swig_setmethods__["StreamChannelId"] = _genicam.GVCP_EVENT_ITEM_StreamChannelId_set
    __swig_getmethods__["StreamChannelId"] = _genicam.GVCP_EVENT_ITEM_StreamChannelId_get
    if _newclass:StreamChannelId = _swig_property(_genicam.GVCP_EVENT_ITEM_StreamChannelId_get, _genicam.GVCP_EVENT_ITEM_StreamChannelId_set)
    __swig_setmethods__["BlockId"] = _genicam.GVCP_EVENT_ITEM_BlockId_set
    __swig_getmethods__["BlockId"] = _genicam.GVCP_EVENT_ITEM_BlockId_get
    if _newclass:BlockId = _swig_property(_genicam.GVCP_EVENT_ITEM_BlockId_get, _genicam.GVCP_EVENT_ITEM_BlockId_set)
    __swig_setmethods__["TimestampHigh"] = _genicam.GVCP_EVENT_ITEM_TimestampHigh_set
    __swig_getmethods__["TimestampHigh"] = _genicam.GVCP_EVENT_ITEM_TimestampHigh_get
    if _newclass:TimestampHigh = _swig_property(_genicam.GVCP_EVENT_ITEM_TimestampHigh_get, _genicam.GVCP_EVENT_ITEM_TimestampHigh_set)
    __swig_setmethods__["TimestampLow"] = _genicam.GVCP_EVENT_ITEM_TimestampLow_set
    __swig_getmethods__["TimestampLow"] = _genicam.GVCP_EVENT_ITEM_TimestampLow_get
    if _newclass:TimestampLow = _swig_property(_genicam.GVCP_EVENT_ITEM_TimestampLow_get, _genicam.GVCP_EVENT_ITEM_TimestampLow_set)
    def __init__(self): 
        this = _genicam.new_GVCP_EVENT_ITEM()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_GVCP_EVENT_ITEM
    __del__ = lambda self : None;
GVCP_EVENT_ITEM_swigregister = _genicam.GVCP_EVENT_ITEM_swigregister
GVCP_EVENT_ITEM_swigregister(GVCP_EVENT_ITEM)

class GVCP_EVENT_REQUEST(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GVCP_EVENT_REQUEST, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GVCP_EVENT_REQUEST, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Header"] = _genicam.GVCP_EVENT_REQUEST_Header_set
    __swig_getmethods__["Header"] = _genicam.GVCP_EVENT_REQUEST_Header_get
    if _newclass:Header = _swig_property(_genicam.GVCP_EVENT_REQUEST_Header_get, _genicam.GVCP_EVENT_REQUEST_Header_set)
    __swig_setmethods__["Items"] = _genicam.GVCP_EVENT_REQUEST_Items_set
    __swig_getmethods__["Items"] = _genicam.GVCP_EVENT_REQUEST_Items_get
    if _newclass:Items = _swig_property(_genicam.GVCP_EVENT_REQUEST_Items_get, _genicam.GVCP_EVENT_REQUEST_Items_set)
    def __init__(self): 
        this = _genicam.new_GVCP_EVENT_REQUEST()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_GVCP_EVENT_REQUEST
    __del__ = lambda self : None;
GVCP_EVENT_REQUEST_swigregister = _genicam.GVCP_EVENT_REQUEST_swigregister
GVCP_EVENT_REQUEST_swigregister(GVCP_EVENT_REQUEST)

class GVCP_EVENTDATA_REQUEST(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GVCP_EVENTDATA_REQUEST, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GVCP_EVENTDATA_REQUEST, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Header"] = _genicam.GVCP_EVENTDATA_REQUEST_Header_set
    __swig_getmethods__["Header"] = _genicam.GVCP_EVENTDATA_REQUEST_Header_get
    if _newclass:Header = _swig_property(_genicam.GVCP_EVENTDATA_REQUEST_Header_get, _genicam.GVCP_EVENTDATA_REQUEST_Header_set)
    __swig_setmethods__["Event"] = _genicam.GVCP_EVENTDATA_REQUEST_Event_set
    __swig_getmethods__["Event"] = _genicam.GVCP_EVENTDATA_REQUEST_Event_get
    if _newclass:Event = _swig_property(_genicam.GVCP_EVENTDATA_REQUEST_Event_get, _genicam.GVCP_EVENTDATA_REQUEST_Event_set)
    __swig_setmethods__["Data"] = _genicam.GVCP_EVENTDATA_REQUEST_Data_set
    __swig_getmethods__["Data"] = _genicam.GVCP_EVENTDATA_REQUEST_Data_get
    if _newclass:Data = _swig_property(_genicam.GVCP_EVENTDATA_REQUEST_Data_get, _genicam.GVCP_EVENTDATA_REQUEST_Data_set)
    def __init__(self): 
        this = _genicam.new_GVCP_EVENTDATA_REQUEST()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_GVCP_EVENTDATA_REQUEST
    __del__ = lambda self : None;
GVCP_EVENTDATA_REQUEST_swigregister = _genicam.GVCP_EVENTDATA_REQUEST_swigregister
GVCP_EVENTDATA_REQUEST_swigregister(GVCP_EVENTDATA_REQUEST)

TAG_EVENT_CMD = _genicam.TAG_EVENT_CMD
TAG_EVENTDATA_CMD = _genicam.TAG_EVENTDATA_CMD
class CEventAdapterGEV(CEventAdapter):
    __swig_setmethods__ = {}
    for _s in [CEventAdapter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEventAdapterGEV, name, value)
    __swig_getmethods__ = {}
    for _s in [CEventAdapter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CEventAdapterGEV, name)
    __repr__ = _swig_repr
    def __init__(self, pNodeMap=None): 
        this = _genicam.new_CEventAdapterGEV(pNodeMap)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CEventAdapterGEV
    __del__ = lambda self : None;
    def DeliverMessage(self, *args): return _genicam.CEventAdapterGEV_DeliverMessage(self, *args)
    def DeliverEventMessage(self, *args): return _genicam.CEventAdapterGEV_DeliverEventMessage(self, *args)
CEventAdapterGEV_swigregister = _genicam.CEventAdapterGEV_swigregister
CEventAdapterGEV_swigregister(CEventAdapterGEV)
COMMAND_MAGIC = cvar.COMMAND_MAGIC

class CEventAdapterGeneric(CEventAdapter):
    __swig_setmethods__ = {}
    for _s in [CEventAdapter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEventAdapterGeneric, name, value)
    __swig_getmethods__ = {}
    for _s in [CEventAdapter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CEventAdapterGeneric, name)
    __repr__ = _swig_repr
    def __init__(self, pNodeMap=None): 
        this = _genicam.new_CEventAdapterGeneric(pNodeMap)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CEventAdapterGeneric
    __del__ = lambda self : None;
    def DeliverMessage(self, *args): return _genicam.CEventAdapterGeneric_DeliverMessage(self, *args)
CEventAdapterGeneric_swigregister = _genicam.CEventAdapterGeneric_swigregister
CEventAdapterGeneric_swigregister(CEventAdapterGeneric)

class CBasePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBasePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CBasePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_CBasePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CBasePtr
    __del__ = lambda self : None;
    def IsValid(self): return _genicam.CBasePtr_IsValid(self)
    def __eq__(self, *args): return _genicam.CBasePtr___eq__(self, *args)
    def __deref__(self): return _genicam.CBasePtr___deref__(self)
    def GetAccessMode(self): return _genicam.CBasePtr_GetAccessMode(self)
CBasePtr_swigregister = _genicam.CBasePtr_swigregister
CBasePtr_swigregister(CBasePtr)

class CNodePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNodePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CNodePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_CNodePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CNodePtr
    __del__ = lambda self : None;
    def IsValid(self): return _genicam.CNodePtr_IsValid(self)
    def __eq__(self, *args): return _genicam.CNodePtr___eq__(self, *args)
    def __deref__(self): return _genicam.CNodePtr___deref__(self)
    def GetName(self, FullQualified=False): return _genicam.CNodePtr_GetName(self, FullQualified)
    def GetNameSpace(self): return _genicam.CNodePtr_GetNameSpace(self)
    def GetVisibility(self): return _genicam.CNodePtr_GetVisibility(self)
    def InvalidateNode(self): return _genicam.CNodePtr_InvalidateNode(self)
    def IsCachable(self): return _genicam.CNodePtr_IsCachable(self)
    def IsAccessModeCacheable(self): return _genicam.CNodePtr_IsAccessModeCacheable(self)
    def GetCachingMode(self): return _genicam.CNodePtr_GetCachingMode(self)
    def GetPollingTime(self): return _genicam.CNodePtr_GetPollingTime(self)
    def GetToolTip(self): return _genicam.CNodePtr_GetToolTip(self)
    def GetDescription(self): return _genicam.CNodePtr_GetDescription(self)
    def GetDisplayName(self): return _genicam.CNodePtr_GetDisplayName(self)
    def GetDeviceName(self): return _genicam.CNodePtr_GetDeviceName(self)
    def GetChildren(self, *args): return _genicam.CNodePtr_GetChildren(self, *args)
    def GetParents(self): return _genicam.CNodePtr_GetParents(self)
    def RegisterCallback(self, *args): return _genicam.CNodePtr_RegisterCallback(self, *args)
    def DeregisterCallback(self, *args): return _genicam.CNodePtr_DeregisterCallback(self, *args)
    def GetNodeMap(self): return _genicam.CNodePtr_GetNodeMap(self)
    def GetEventID(self): return _genicam.CNodePtr_GetEventID(self)
    def IsStreamable(self): return _genicam.CNodePtr_IsStreamable(self)
    def GetPropertyNames(self): return _genicam.CNodePtr_GetPropertyNames(self)
    def GetProperty(self, *args): return _genicam.CNodePtr_GetProperty(self, *args)
    def ImposeAccessMode(self, *args): return _genicam.CNodePtr_ImposeAccessMode(self, *args)
    def ImposeVisibility(self, *args): return _genicam.CNodePtr_ImposeVisibility(self, *args)
    def GetAlias(self): return _genicam.CNodePtr_GetAlias(self)
    def GetCastAlias(self): return _genicam.CNodePtr_GetCastAlias(self)
    def GetDocuURL(self): return _genicam.CNodePtr_GetDocuURL(self)
    def IsDeprecated(self): return _genicam.CNodePtr_IsDeprecated(self)
    def GetPrincipalInterfaceType(self): return _genicam.CNodePtr_GetPrincipalInterfaceType(self)
    def IsFeature(self): return _genicam.CNodePtr_IsFeature(self)
    def GetAccessMode(self): return _genicam.CNodePtr_GetAccessMode(self)
CNodePtr_swigregister = _genicam.CNodePtr_swigregister
CNodePtr_swigregister(CNodePtr)

class CValuePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CValuePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CValuePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_CValuePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CValuePtr
    __del__ = lambda self : None;
    def IsValid(self): return _genicam.CValuePtr_IsValid(self)
    def __eq__(self, *args): return _genicam.CValuePtr___eq__(self, *args)
    def __deref__(self): return _genicam.CValuePtr___deref__(self)
    def GetNode(self): return _genicam.CValuePtr_GetNode(self)
    def ToString(self, Verify=False, IgnoreCache=False): return _genicam.CValuePtr_ToString(self, Verify, IgnoreCache)
    def FromString(self, *args): return _genicam.CValuePtr_FromString(self, *args)
    def IsValueCacheValid(self): return _genicam.CValuePtr_IsValueCacheValid(self)
    def GetAccessMode(self): return _genicam.CValuePtr_GetAccessMode(self)
CValuePtr_swigregister = _genicam.CValuePtr_swigregister
CValuePtr_swigregister(CValuePtr)

class CCategoryPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCategoryPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCategoryPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_CCategoryPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CCategoryPtr
    __del__ = lambda self : None;
    def IsValid(self): return _genicam.CCategoryPtr_IsValid(self)
    def __eq__(self, *args): return _genicam.CCategoryPtr___eq__(self, *args)
    def __deref__(self): return _genicam.CCategoryPtr___deref__(self)
    def GetFeatures(self): return _genicam.CCategoryPtr_GetFeatures(self)
    def GetNode(self): return _genicam.CCategoryPtr_GetNode(self)
    def ToString(self, Verify=False, IgnoreCache=False): return _genicam.CCategoryPtr_ToString(self, Verify, IgnoreCache)
    def FromString(self, *args): return _genicam.CCategoryPtr_FromString(self, *args)
    def IsValueCacheValid(self): return _genicam.CCategoryPtr_IsValueCacheValid(self)
    def GetAccessMode(self): return _genicam.CCategoryPtr_GetAccessMode(self)
CCategoryPtr_swigregister = _genicam.CCategoryPtr_swigregister
CCategoryPtr_swigregister(CCategoryPtr)

class CBooleanPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBooleanPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CBooleanPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_CBooleanPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CBooleanPtr
    __del__ = lambda self : None;
    def IsValid(self): return _genicam.CBooleanPtr_IsValid(self)
    def __eq__(self, *args): return _genicam.CBooleanPtr___eq__(self, *args)
    def __deref__(self): return _genicam.CBooleanPtr___deref__(self)
    def SetValue(self, *args): return _genicam.CBooleanPtr_SetValue(self, *args)
    def GetValue(self, Verify=False, IgnoreCache=False): return _genicam.CBooleanPtr_GetValue(self, Verify, IgnoreCache)
    def __call__(self): return _genicam.CBooleanPtr___call__(self)
    def GetNode(self): return _genicam.CBooleanPtr_GetNode(self)
    def ToString(self, Verify=False, IgnoreCache=False): return _genicam.CBooleanPtr_ToString(self, Verify, IgnoreCache)
    def FromString(self, *args): return _genicam.CBooleanPtr_FromString(self, *args)
    def IsValueCacheValid(self): return _genicam.CBooleanPtr_IsValueCacheValid(self)
    def GetAccessMode(self): return _genicam.CBooleanPtr_GetAccessMode(self)
CBooleanPtr_swigregister = _genicam.CBooleanPtr_swigregister
CBooleanPtr_swigregister(CBooleanPtr)

class CIntegerPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CIntegerPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CIntegerPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_CIntegerPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CIntegerPtr
    __del__ = lambda self : None;
    def IsValid(self): return _genicam.CIntegerPtr_IsValid(self)
    def __eq__(self, *args): return _genicam.CIntegerPtr___eq__(self, *args)
    def __deref__(self): return _genicam.CIntegerPtr___deref__(self)
    def SetValue(self, *args): return _genicam.CIntegerPtr_SetValue(self, *args)
    def GetValue(self, Verify=False, IgnoreCache=False): return _genicam.CIntegerPtr_GetValue(self, Verify, IgnoreCache)
    def __call__(self): return _genicam.CIntegerPtr___call__(self)
    def GetMin(self): return _genicam.CIntegerPtr_GetMin(self)
    def GetMax(self): return _genicam.CIntegerPtr_GetMax(self)
    def GetInc(self): return _genicam.CIntegerPtr_GetInc(self)
    def GetRepresentation(self): return _genicam.CIntegerPtr_GetRepresentation(self)
    def GetUnit(self): return _genicam.CIntegerPtr_GetUnit(self)
    def ImposeMin(self, *args): return _genicam.CIntegerPtr_ImposeMin(self, *args)
    def ImposeMax(self, *args): return _genicam.CIntegerPtr_ImposeMax(self, *args)
    def GetNode(self): return _genicam.CIntegerPtr_GetNode(self)
    def ToString(self, Verify=False, IgnoreCache=False): return _genicam.CIntegerPtr_ToString(self, Verify, IgnoreCache)
    def FromString(self, *args): return _genicam.CIntegerPtr_FromString(self, *args)
    def IsValueCacheValid(self): return _genicam.CIntegerPtr_IsValueCacheValid(self)
    def GetAccessMode(self): return _genicam.CIntegerPtr_GetAccessMode(self)
CIntegerPtr_swigregister = _genicam.CIntegerPtr_swigregister
CIntegerPtr_swigregister(CIntegerPtr)

class CStringPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStringPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CStringPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_CStringPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CStringPtr
    __del__ = lambda self : None;
    def IsValid(self): return _genicam.CStringPtr_IsValid(self)
    def __eq__(self, *args): return _genicam.CStringPtr___eq__(self, *args)
    def __deref__(self): return _genicam.CStringPtr___deref__(self)
    def SetValue(self, *args): return _genicam.CStringPtr_SetValue(self, *args)
    def GetValue(self, Verify=False, IgnoreCache=False): return _genicam.CStringPtr_GetValue(self, Verify, IgnoreCache)
    def __call__(self): return _genicam.CStringPtr___call__(self)
    def GetMaxLength(self): return _genicam.CStringPtr_GetMaxLength(self)
    def GetNode(self): return _genicam.CStringPtr_GetNode(self)
    def ToString(self, Verify=False, IgnoreCache=False): return _genicam.CStringPtr_ToString(self, Verify, IgnoreCache)
    def FromString(self, *args): return _genicam.CStringPtr_FromString(self, *args)
    def IsValueCacheValid(self): return _genicam.CStringPtr_IsValueCacheValid(self)
    def GetAccessMode(self): return _genicam.CStringPtr_GetAccessMode(self)
CStringPtr_swigregister = _genicam.CStringPtr_swigregister
CStringPtr_swigregister(CStringPtr)

class CRegisterPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRegisterPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRegisterPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_CRegisterPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CRegisterPtr
    __del__ = lambda self : None;
    def IsValid(self): return _genicam.CRegisterPtr_IsValid(self)
    def __eq__(self, *args): return _genicam.CRegisterPtr___eq__(self, *args)
    def __deref__(self): return _genicam.CRegisterPtr___deref__(self)
    def Set(self, *args): return _genicam.CRegisterPtr_Set(self, *args)
    def Get(self, *args): return _genicam.CRegisterPtr_Get(self, *args)
    def GetLength(self): return _genicam.CRegisterPtr_GetLength(self)
    def GetAddress(self): return _genicam.CRegisterPtr_GetAddress(self)
    def GetNode(self): return _genicam.CRegisterPtr_GetNode(self)
    def ToString(self, Verify=False, IgnoreCache=False): return _genicam.CRegisterPtr_ToString(self, Verify, IgnoreCache)
    def FromString(self, *args): return _genicam.CRegisterPtr_FromString(self, *args)
    def IsValueCacheValid(self): return _genicam.CRegisterPtr_IsValueCacheValid(self)
    def GetAccessMode(self): return _genicam.CRegisterPtr_GetAccessMode(self)
CRegisterPtr_swigregister = _genicam.CRegisterPtr_swigregister
CRegisterPtr_swigregister(CRegisterPtr)

class CEnumerationPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEnumerationPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CEnumerationPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_CEnumerationPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CEnumerationPtr
    __del__ = lambda self : None;
    def IsValid(self): return _genicam.CEnumerationPtr_IsValid(self)
    def __eq__(self, *args): return _genicam.CEnumerationPtr___eq__(self, *args)
    def __deref__(self): return _genicam.CEnumerationPtr___deref__(self)
    def GetSymbolics(self): return _genicam.CEnumerationPtr_GetSymbolics(self)
    def GetEntries(self): return _genicam.CEnumerationPtr_GetEntries(self)
    def SetIntValue(self, *args): return _genicam.CEnumerationPtr_SetIntValue(self, *args)
    def GetIntValue(self, Verify=False, IgnoreCache=False): return _genicam.CEnumerationPtr_GetIntValue(self, Verify, IgnoreCache)
    def GetEntryByName(self, *args): return _genicam.CEnumerationPtr_GetEntryByName(self, *args)
    def GetEntry(self, *args): return _genicam.CEnumerationPtr_GetEntry(self, *args)
    def GetCurrentEntry(self, Verify=False, IgnoreCache=False): return _genicam.CEnumerationPtr_GetCurrentEntry(self, Verify, IgnoreCache)
    def __call__(self): return _genicam.CEnumerationPtr___call__(self)
    def SetValue(self, *args): return _genicam.CEnumerationPtr_SetValue(self, *args)
    def GetNode(self): return _genicam.CEnumerationPtr_GetNode(self)
    def ToString(self, Verify=False, IgnoreCache=False): return _genicam.CEnumerationPtr_ToString(self, Verify, IgnoreCache)
    def FromString(self, *args): return _genicam.CEnumerationPtr_FromString(self, *args)
    def IsValueCacheValid(self): return _genicam.CEnumerationPtr_IsValueCacheValid(self)
    def GetAccessMode(self): return _genicam.CEnumerationPtr_GetAccessMode(self)
CEnumerationPtr_swigregister = _genicam.CEnumerationPtr_swigregister
CEnumerationPtr_swigregister(CEnumerationPtr)

class CEnumEntryPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEnumEntryPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CEnumEntryPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_CEnumEntryPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CEnumEntryPtr
    __del__ = lambda self : None;
    def IsValid(self): return _genicam.CEnumEntryPtr_IsValid(self)
    def __eq__(self, *args): return _genicam.CEnumEntryPtr___eq__(self, *args)
    def __deref__(self): return _genicam.CEnumEntryPtr___deref__(self)
    def GetValue(self): return _genicam.CEnumEntryPtr_GetValue(self)
    def GetSymbolic(self): return _genicam.CEnumEntryPtr_GetSymbolic(self)
    def GetNumericValue(self): return _genicam.CEnumEntryPtr_GetNumericValue(self)
    def IsSelfClearing(self): return _genicam.CEnumEntryPtr_IsSelfClearing(self)
    def GetNode(self): return _genicam.CEnumEntryPtr_GetNode(self)
    def ToString(self, Verify=False, IgnoreCache=False): return _genicam.CEnumEntryPtr_ToString(self, Verify, IgnoreCache)
    def FromString(self, *args): return _genicam.CEnumEntryPtr_FromString(self, *args)
    def IsValueCacheValid(self): return _genicam.CEnumEntryPtr_IsValueCacheValid(self)
    def GetAccessMode(self): return _genicam.CEnumEntryPtr_GetAccessMode(self)
CEnumEntryPtr_swigregister = _genicam.CEnumEntryPtr_swigregister
CEnumEntryPtr_swigregister(CEnumEntryPtr)

class CPortPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPortPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPortPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_CPortPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CPortPtr
    __del__ = lambda self : None;
    def IsValid(self): return _genicam.CPortPtr_IsValid(self)
    def __eq__(self, *args): return _genicam.CPortPtr___eq__(self, *args)
    def __deref__(self): return _genicam.CPortPtr___deref__(self)
    def Read(self, *args): return _genicam.CPortPtr_Read(self, *args)
    def Write(self, *args): return _genicam.CPortPtr_Write(self, *args)
    def GetAccessMode(self): return _genicam.CPortPtr_GetAccessMode(self)
CPortPtr_swigregister = _genicam.CPortPtr_swigregister
CPortPtr_swigregister(CPortPtr)

class CPortReplayPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPortReplayPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPortReplayPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_CPortReplayPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CPortReplayPtr
    __del__ = lambda self : None;
    def IsValid(self): return _genicam.CPortReplayPtr_IsValid(self)
    def __eq__(self, *args): return _genicam.CPortReplayPtr___eq__(self, *args)
    def __deref__(self): return _genicam.CPortReplayPtr___deref__(self)
    def Replay(self, *args): return _genicam.CPortReplayPtr_Replay(self, *args)
    def Read(self, *args): return _genicam.CPortReplayPtr_Read(self, *args)
    def Write(self, *args): return _genicam.CPortReplayPtr_Write(self, *args)
    def GetAccessMode(self): return _genicam.CPortReplayPtr_GetAccessMode(self)
CPortReplayPtr_swigregister = _genicam.CPortReplayPtr_swigregister
CPortReplayPtr_swigregister(CPortReplayPtr)

class CPortRecorderPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPortRecorderPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPortRecorderPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_CPortRecorderPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CPortRecorderPtr
    __del__ = lambda self : None;
    def IsValid(self): return _genicam.CPortRecorderPtr_IsValid(self)
    def __eq__(self, *args): return _genicam.CPortRecorderPtr___eq__(self, *args)
    def __deref__(self): return _genicam.CPortRecorderPtr___deref__(self)
    def StartRecording(self, *args): return _genicam.CPortRecorderPtr_StartRecording(self, *args)
    def StopRecording(self): return _genicam.CPortRecorderPtr_StopRecording(self)
    def Replay(self, *args): return _genicam.CPortRecorderPtr_Replay(self, *args)
    def Read(self, *args): return _genicam.CPortRecorderPtr_Read(self, *args)
    def Write(self, *args): return _genicam.CPortRecorderPtr_Write(self, *args)
    def GetAccessMode(self): return _genicam.CPortRecorderPtr_GetAccessMode(self)
CPortRecorderPtr_swigregister = _genicam.CPortRecorderPtr_swigregister
CPortRecorderPtr_swigregister(CPortRecorderPtr)

class CPortWriteListPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPortWriteListPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPortWriteListPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_CPortWriteListPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CPortWriteListPtr
    __del__ = lambda self : None;
    def IsValid(self): return _genicam.CPortWriteListPtr_IsValid(self)
    def __eq__(self, *args): return _genicam.CPortWriteListPtr___eq__(self, *args)
    def __deref__(self): return _genicam.CPortWriteListPtr___deref__(self)
    def Write(self, *args): return _genicam.CPortWriteListPtr_Write(self, *args)
    def Replay(self, *args): return _genicam.CPortWriteListPtr_Replay(self, *args)
    def SetCookie(self, *args): return _genicam.CPortWriteListPtr_SetCookie(self, *args)
    def GetCookie(self): return _genicam.CPortWriteListPtr_GetCookie(self)
CPortWriteListPtr_swigregister = _genicam.CPortWriteListPtr_swigregister
CPortWriteListPtr_swigregister(CPortWriteListPtr)

class CChunkPortPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CChunkPortPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CChunkPortPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_CChunkPortPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CChunkPortPtr
    __del__ = lambda self : None;
    def IsValid(self): return _genicam.CChunkPortPtr_IsValid(self)
    def __eq__(self, *args): return _genicam.CChunkPortPtr___eq__(self, *args)
    def __deref__(self): return _genicam.CChunkPortPtr___deref__(self)
    def GetChunkID(self): return _genicam.CChunkPortPtr_GetChunkID(self)
    def CacheChunkData(self): return _genicam.CChunkPortPtr_CacheChunkData(self)
    def Read(self, *args): return _genicam.CChunkPortPtr_Read(self, *args)
    def Write(self, *args): return _genicam.CChunkPortPtr_Write(self, *args)
    def GetAccessMode(self): return _genicam.CChunkPortPtr_GetAccessMode(self)
CChunkPortPtr_swigregister = _genicam.CChunkPortPtr_swigregister
CChunkPortPtr_swigregister(CChunkPortPtr)

class CNodeMapPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNodeMapPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CNodeMapPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_CNodeMapPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CNodeMapPtr
    __del__ = lambda self : None;
    def IsValid(self): return _genicam.CNodeMapPtr_IsValid(self)
    def __eq__(self, *args): return _genicam.CNodeMapPtr___eq__(self, *args)
    def __deref__(self): return _genicam.CNodeMapPtr___deref__(self)
    def GetNodes(self): return _genicam.CNodeMapPtr_GetNodes(self)
    def GetNode(self, *args): return _genicam.CNodeMapPtr_GetNode(self, *args)
    def InvalidateNodes(self): return _genicam.CNodeMapPtr_InvalidateNodes(self)
    def Connect(self, *args): return _genicam.CNodeMapPtr_Connect(self, *args)
    def GetDeviceName(self): return _genicam.CNodeMapPtr_GetDeviceName(self)
    def Poll(self, *args): return _genicam.CNodeMapPtr_Poll(self, *args)
    def GetLock(self): return _genicam.CNodeMapPtr_GetLock(self)
    def GetNumNodes(self): return _genicam.CNodeMapPtr_GetNumNodes(self)
CNodeMapPtr_swigregister = _genicam.CNodeMapPtr_swigregister
CNodeMapPtr_swigregister(CNodeMapPtr)

class CNodeMapDynPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNodeMapDynPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CNodeMapDynPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_CNodeMapDynPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CNodeMapDynPtr
    __del__ = lambda self : None;
    def IsValid(self): return _genicam.CNodeMapDynPtr_IsValid(self)
    def __eq__(self, *args): return _genicam.CNodeMapDynPtr___eq__(self, *args)
    def __deref__(self): return _genicam.CNodeMapDynPtr___deref__(self)
CNodeMapDynPtr_swigregister = _genicam.CNodeMapDynPtr_swigregister
CNodeMapDynPtr_swigregister(CNodeMapDynPtr)

class CDeviceInfoPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDeviceInfoPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CDeviceInfoPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_CDeviceInfoPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CDeviceInfoPtr
    __del__ = lambda self : None;
    def IsValid(self): return _genicam.CDeviceInfoPtr_IsValid(self)
    def __eq__(self, *args): return _genicam.CDeviceInfoPtr___eq__(self, *args)
    def __deref__(self): return _genicam.CDeviceInfoPtr___deref__(self)
    def GetModelName(self): return _genicam.CDeviceInfoPtr_GetModelName(self)
    def GetVendorName(self): return _genicam.CDeviceInfoPtr_GetVendorName(self)
    def GetToolTip(self): return _genicam.CDeviceInfoPtr_GetToolTip(self)
    def GetStandardNameSpace(self): return _genicam.CDeviceInfoPtr_GetStandardNameSpace(self)
    def GetGenApiVersion(self): return _genicam.CDeviceInfoPtr_GetGenApiVersion(self)
    def GetSchemaVersion(self): return _genicam.CDeviceInfoPtr_GetSchemaVersion(self)
    def GetDeviceVersion(self): return _genicam.CDeviceInfoPtr_GetDeviceVersion(self)
    def GetProductGuid(self): return _genicam.CDeviceInfoPtr_GetProductGuid(self)
    def GetVersionGuid(self): return _genicam.CDeviceInfoPtr_GetVersionGuid(self)
CDeviceInfoPtr_swigregister = _genicam.CDeviceInfoPtr_swigregister
CDeviceInfoPtr_swigregister(CDeviceInfoPtr)

class CSelectorPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSelectorPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSelectorPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_CSelectorPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CSelectorPtr
    __del__ = lambda self : None;
    def IsValid(self): return _genicam.CSelectorPtr_IsValid(self)
    def __eq__(self, *args): return _genicam.CSelectorPtr___eq__(self, *args)
    def __deref__(self): return _genicam.CSelectorPtr___deref__(self)
    def GetAccessMode(self): return _genicam.CSelectorPtr_GetAccessMode(self)
CSelectorPtr_swigregister = _genicam.CSelectorPtr_swigregister
CSelectorPtr_swigregister(CSelectorPtr)

class CCommandPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCommandPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCommandPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_CCommandPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CCommandPtr
    __del__ = lambda self : None;
    def IsValid(self): return _genicam.CCommandPtr_IsValid(self)
    def __eq__(self, *args): return _genicam.CCommandPtr___eq__(self, *args)
    def __deref__(self): return _genicam.CCommandPtr___deref__(self)
    def Execute(self, Verify=True): return _genicam.CCommandPtr_Execute(self, Verify)
    def __call__(self): return _genicam.CCommandPtr___call__(self)
    def IsDone(self, Verify=False): return _genicam.CCommandPtr_IsDone(self, Verify)
    def GetNode(self): return _genicam.CCommandPtr_GetNode(self)
    def ToString(self, Verify=False, IgnoreCache=False): return _genicam.CCommandPtr_ToString(self, Verify, IgnoreCache)
    def FromString(self, *args): return _genicam.CCommandPtr_FromString(self, *args)
    def IsValueCacheValid(self): return _genicam.CCommandPtr_IsValueCacheValid(self)
    def GetAccessMode(self): return _genicam.CCommandPtr_GetAccessMode(self)
CCommandPtr_swigregister = _genicam.CCommandPtr_swigregister
CCommandPtr_swigregister(CCommandPtr)

class CFloatPtrBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFloatPtrBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CFloatPtrBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_CFloatPtrBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CFloatPtrBase
    __del__ = lambda self : None;
    def IsValid(self): return _genicam.CFloatPtrBase_IsValid(self)
    def __eq__(self, *args): return _genicam.CFloatPtrBase___eq__(self, *args)
    def __deref__(self): return _genicam.CFloatPtrBase___deref__(self)
    def SetValue(self, *args): return _genicam.CFloatPtrBase_SetValue(self, *args)
    def GetValue(self, Verify=False, IgnoreCache=False): return _genicam.CFloatPtrBase_GetValue(self, Verify, IgnoreCache)
    def __call__(self): return _genicam.CFloatPtrBase___call__(self)
    def GetMin(self): return _genicam.CFloatPtrBase_GetMin(self)
    def GetMax(self): return _genicam.CFloatPtrBase_GetMax(self)
    def HasInc(self): return _genicam.CFloatPtrBase_HasInc(self)
    def GetInc(self): return _genicam.CFloatPtrBase_GetInc(self)
    def GetRepresentation(self): return _genicam.CFloatPtrBase_GetRepresentation(self)
    def GetUnit(self): return _genicam.CFloatPtrBase_GetUnit(self)
    def GetDisplayNotation(self): return _genicam.CFloatPtrBase_GetDisplayNotation(self)
    def GetDisplayPrecision(self): return _genicam.CFloatPtrBase_GetDisplayPrecision(self)
    def ImposeMin(self, *args): return _genicam.CFloatPtrBase_ImposeMin(self, *args)
    def ImposeMax(self, *args): return _genicam.CFloatPtrBase_ImposeMax(self, *args)
    def GetNode(self): return _genicam.CFloatPtrBase_GetNode(self)
    def ToString(self, Verify=False, IgnoreCache=False): return _genicam.CFloatPtrBase_ToString(self, Verify, IgnoreCache)
    def FromString(self, *args): return _genicam.CFloatPtrBase_FromString(self, *args)
    def IsValueCacheValid(self): return _genicam.CFloatPtrBase_IsValueCacheValid(self)
    def GetAccessMode(self): return _genicam.CFloatPtrBase_GetAccessMode(self)
CFloatPtrBase_swigregister = _genicam.CFloatPtrBase_swigregister
CFloatPtrBase_swigregister(CFloatPtrBase)

class CFloatPtr(CFloatPtrBase):
    __swig_setmethods__ = {}
    for _s in [CFloatPtrBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFloatPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [CFloatPtrBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFloatPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_CFloatPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetIntAlias(self): return _genicam.CFloatPtr_GetIntAlias(self)
    def GetEnumAlias(self): return _genicam.CFloatPtr_GetEnumAlias(self)
    __swig_destroy__ = _genicam.delete_CFloatPtr
    __del__ = lambda self : None;
CFloatPtr_swigregister = _genicam.CFloatPtr_swigregister
CFloatPtr_swigregister(CFloatPtr)

class CPortConstructPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPortConstructPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPortConstructPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genicam.new_CPortConstructPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genicam.delete_CPortConstructPtr
    __del__ = lambda self : None;
    def IsValid(self): return _genicam.CPortConstructPtr_IsValid(self)
    def __eq__(self, *args): return _genicam.CPortConstructPtr___eq__(self, *args)
    def __deref__(self): return _genicam.CPortConstructPtr___deref__(self)
    def GetSwapEndianess(self): return _genicam.CPortConstructPtr_GetSwapEndianess(self)
    def Read(self, *args): return _genicam.CPortConstructPtr_Read(self, *args)
    def Write(self, *args): return _genicam.CPortConstructPtr_Write(self, *args)
    def GetAccessMode(self): return _genicam.CPortConstructPtr_GetAccessMode(self)
CPortConstructPtr_swigregister = _genicam.CPortConstructPtr_swigregister
CPortConstructPtr_swigregister(CPortConstructPtr)


def GetInterfaceName(*args):
  return _genicam.GetInterfaceName(*args)
GetInterfaceName = _genicam.GetInterfaceName
class FileProtocolAdapter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileProtocolAdapter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileProtocolAdapter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _genicam.new_FileProtocolAdapter()
        try: self.this.append(this)
        except: self.this = this
    def attach(self, *args): return _genicam.FileProtocolAdapter_attach(self, *args)
    def openFile(self, *args): return _genicam.FileProtocolAdapter_openFile(self, *args)
    def closeFile(self, *args): return _genicam.FileProtocolAdapter_closeFile(self, *args)
    def write(self, *args): return _genicam.FileProtocolAdapter_write(self, *args)
    def read(self, *args): return _genicam.FileProtocolAdapter_read(self, *args)
    def getBufSize(self, *args): return _genicam.FileProtocolAdapter_getBufSize(self, *args)
    def deleteFile(self, *args): return _genicam.FileProtocolAdapter_deleteFile(self, *args)
    __swig_destroy__ = _genicam.delete_FileProtocolAdapter
    __del__ = lambda self : None;
FileProtocolAdapter_swigregister = _genicam.FileProtocolAdapter_swigregister
FileProtocolAdapter_swigregister(FileProtocolAdapter)

class FileAccess(object):
	def __init__(self, read_bufsize = 4096):
		if read_bufsize == 0:
			raise IOError("invalid read_bufsize")
        
		self.isopen   = False
		self.filename = ""
		self.mode     = ""
		self.fpa      = FileProtocolAdapter()
		self.fpa_bufsize  = 0
		self.fpos     = 0
		self.read_bufsize = read_bufsize
    
	def open(self, nodemap, filename, openmode):
		self.fpa.attach(nodemap)
		self.filename = filename
		self.fpa.openFile(filename,openmode)
		self.fpa_bufsize = self.fpa.getBufSize(filename, openmode)
		self.fpos = 0
		self.isopen = True
        
	def close(self):
		self.isopen = False
		self.fpa.closeFile(self.filename)
    
	def _read(self, size):
		assert(self.isopen)
		buf = ""
		for ofs in xrange(0, size, self.fpa_bufsize):
			read_len, data  = self.fpa.read(self.fpa_bufsize, self.fpos + ofs, self.filename)
			if read_len <= 0:
				break
			else:
				buf += data[:min(size-ofs,read_len)]

		self.fpos += len(buf)
		return buf
    
	def read(self, size = -1):
		assert(self.isopen)
		if size < 0:
			buf = ""
			while True:
				data  = self._read(self.read_bufsize)
				buf += data
				if len(data) < self.read_bufsize:
					return buf
                    
		else:
			data  = self._read(size)
			return data

                        
	def write(self,data):
		assert(self.isopen)
		ret = self.fpa.write(data, self.fpos, self.filename)
		self.fpos += len(data)
		return ret
	
# This file is compatible with both classic and new-style classes.


